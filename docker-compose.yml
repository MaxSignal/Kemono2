version: '2.3'
services:
  nginx:
    image: nginx
    container_name: ${COMPOSE_PROJECT_NAME}_nginx
    depends_on:
      backend:
        condition: service_healthy
      archiver:
        condition: service_started
    ports:
      - 8000:80
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - data:/storage
  backend:
    build: .
    container_name: ${COMPOSE_PROJECT_NAME}_backend
    restart: unless-stopped
    depends_on:
      database:
        condition: service_healthy
    env_file:
      - .env.prod
    volumes:
      - frontend-assets:/app/dist:ro
    sysctls:
      net.core.somaxconn: 500
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:80" ]
      interval: 1m
      timeout: 2m
      retries: 3
      start_period: 30s
  frontend:
    build:
      context: ./client
    container_name: ${COMPOSE_PROJECT_NAME}_frontend
    env_file:
      - .env.prod
    volumes:
      - frontend-assets:/app/dist
  archiver:
    build:
      context: ./archiver
      dockerfile: Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME}_archiver
    env_file:
      - .env.prod
    restart: unless-stopped
    depends_on:
      database:
        condition: service_healthy
    volumes:
      - data:/storage
    sysctls:
      net.core.somaxconn: 40000
  redis:
    image: redis:6.2.0
    container_name: ${COMPOSE_PROJECT_NAME}_redis
  database:
    image: healthcheck/postgres
    container_name: ${COMPOSE_PROJECT_NAME}_database
    environment:
      - POSTGRES_DB=${DATABASE_NAME}
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
    volumes:
      - db-data:/var/lib/postgresql/data/
    restart: unless-stopped
    # ports:
    #  - 5432:5432
  autoheal:
    restart: always
    container_name: ${COMPOSE_PROJECT_NAME}_autoheal
    image: willfarrell/autoheal
    environment:
      - AUTOHEAL_CONTAINER_LABEL=all
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

volumes:
  # If you need to store your volumes manually, uncomment the "driver_opts" lines and specify your "device" location.
  db-data:
    driver: local
    # driver_opts:
    #   type: 'none'
    #   o: 'bind'
    #   device: "/mnt/slab1/kemono-db"
  data:
    driver: local
    # driver_opts:
    #   type: 'none'
    #   o: 'bind'
    #   device: "/mnt/slab1/kemono"
  frontend-assets:
    driver: local
    # driver_opts:
    #   type: 'none'
    #   o: 'bind'
    #   device: "/mnt/slab1/kemono-assets"
